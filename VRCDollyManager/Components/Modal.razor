@using VRCDollyManager.Models

<div class="modal-container @(IsOpen ? "show" : "hide")">
    <div class="modal-backdrop" @onclick="Close"></div>
    <div class="modal-overlay">
        <div class="modal-content @GetSizeClass()" @onclick:stopPropagation>
            <div class="modal-header">
                @if (Icon != null)
                {
                    <span class="modal-header-icon">
                        <Blazicon Svg="@Icon"></Blazicon>
                    </span>
                }
                <h2>@Title</h2>
                <button class="close-button" @onclick="Close">
                    <Blazicon Svg="Lucide.X"/>
                </button>
            </div>
            <div class="modal-body @(GetScrollBodyCSS())">
                @ChildContent
            </div>
            @if (FooterContent != null)
            {
                <div class="modal-footer">
                    @FooterContent
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public string Title { get; set; } = "Modal Title";
    [Parameter] public SvgIcon? Icon { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;
    [Parameter] public bool ScrollBody { get; set; } = true;

    private bool IsOpen { get; set; }

    public void OpenModal()
    {
        IsOpen = true;
        StateHasChanged();
    }

    private string GetScrollBodyCSS() => ScrollBody ? string.Empty : "no-scroll";

    public async Task Close()
    {
        StateHasChanged();
        await Task.Delay(200); // Wait for animation to finish
        IsOpen = false;
        await OnClose.InvokeAsync(false);
        StateHasChanged();
    }

    private string GetSizeClass()
    {
        return Size switch
        {
            ModalSize.Small => "modal-small",
            ModalSize.Large => "modal-large",
            _ => "modal-medium"
        };
    }

}