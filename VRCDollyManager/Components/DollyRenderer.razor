@using System.Text.Json
@using System.Text.Json.Serialization
@using HarfBuzzSharp
@using VRCDollyManager.Extensions
@using VRCDollyManager.Models
@inject  IJSRuntime JS
<div class="dolly-details-container">
    <div class="dolly-renderer-container">
        <canvas id="preview"></canvas>
    </div>

</div>
<div class="dolly-renderer-path-details">
    <div class="dolly-renderer-path-detail">
        <label>Tags:</label>
        <div> @_tagCount </div>
    </div>
    <div class="dolly-renderer-path-detail">
        <label>Paths:</label>
        <div> @_pathCount </div>
    </div>
</div>
@code {
    uint _pathCount = 0;
    uint _tagCount = 0;    
    
    
    

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JS.InvokeVoidAsync("ThreeInterop.initScene");

            }
            catch(Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", ex.Message);
            }
        }
    }
    
    public async Task LoadDollyPath(Dolly dolly)
    {
        //Tags = dolly.Tags;
        StateHasChanged();
        var keyframes = dolly.GetCameraKeyFrames() ?? new List<CameraKeyFrame>();
        
        _pathCount = (uint)keyframes.DistinctBy(x=> x.PathIndex).Count();
        _tagCount = (uint)dolly.Tags.Count();
        
        if (!keyframes.Any() || keyframes.Count < 2)
        {
            Console.WriteLine("Error: No keyframes provided.");
            await ClearScene();
            return;
        }

        var groups = keyframes.GroupBy(x => x.PathIndex).ToDictionary(x=> x.Key, x => x.ToList());
        
        var options = new JsonSerializerOptions
        {
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase, // Change to CamelCase for JS compatibility
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        var json = JsonSerializer.Serialize(keyframes, options);

        await JS.InvokeVoidAsync("ThreeInterop.renderPaths", json);
    }

    public async Task ClearScene()
    {
        _pathCount = 0;
        _tagCount = 0;
        StateHasChanged();
        await JS.InvokeVoidAsync("ThreeInterop.clearScene");
    }

}