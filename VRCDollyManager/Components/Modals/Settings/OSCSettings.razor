@using System.Timers
@using VRCDollyManager.Services.OSC
@inject IOscService Osc
@implements IDisposable

<div class="settings-group">
    <div class="settings-group-label">
        <Blazicon Svg="Lucide.Signal"></Blazicon>
        <label>OSCQuery</label>
        <SettingsIndicator Color="@(GetConnectionStatus())"
                           Label="@(GetConnectionLabel())"/>
    </div>
    <div class="settings-group-content">
        <div class="settings-item">
            <label>Listening Port</label>
            <div class="value">
                @GetPortLabel()
            </div>
        </div>
    </div>
</div>
 
@code
{
    private bool _isConnected = false;
    private int? _port = null;
    System.Timers.Timer _timer = new(1000);

    protected override void OnInitialized()
    {
        Refresh();
        _timer.Elapsed += TimerOnElapsed;
        _timer.Start();
        Osc.OnConnectionStateChanged += ConnectionStateChanged;
    }

    private string GetConnectionLabel() =>
        _isConnected ? "Connected" : "Disconnected";
    private SettingsIndicatorColor GetConnectionStatus() =>
        _isConnected ? SettingsIndicatorColor.Green : SettingsIndicatorColor.Red;
    private string GetPortLabel() =>
        _port.HasValue ? _port.Value.ToString() : "Unknown";
    
    private void Refresh()
    {
        _isConnected = Osc.IsConnected;
        _port = Osc.ListeningPort;
    }

    
    private void TimerOnElapsed(object? sender, ElapsedEventArgs e)
    {
        Refresh();
        InvokeAsync(StateHasChanged);
    }
    
    private void ConnectionStateChanged(object? sender, OSCServiceConnectionEvent e)
    {
        _isConnected = e.Connected;
        _port = e.ListeningPort;
        InvokeAsync(StateHasChanged);
        
    }

    public void Dispose()
    {        
        _timer.Dispose();
        Osc.OnConnectionStateChanged -= ConnectionStateChanged;
    }
}